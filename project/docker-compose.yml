version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: pmc_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-pmc_db}
      POSTGRES_USER: ${DB_USER:-pmc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pmc_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - pmc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pmc_user} -d ${DB_NAME:-pmc_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: pmc_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pmc_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - pmc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pmc_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-pmc_user}:${DB_PASSWORD:-pmc_password}@postgres:5432/${DB_NAME:-pmc_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-pmc_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - API_V1_STR=/api/v1
      - PROJECT_NAME=${PROJECT_NAME:-PMC全流程管理系统}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - pmc_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pmc_frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api/v1}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
      - REACT_APP_TITLE=${REACT_APP_TITLE:-PMC全流程管理系统}
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - pmc_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: pmc_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend/uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - pmc_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  pmc_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16